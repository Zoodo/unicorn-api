# Generated by Django 3.1.2 on 2020-10-17 11:46

import achievements.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("achievements", "0001_initial"),
        ("achievements", "0002_auto_20201017_1034"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("accounts", "__first__"),
    ]

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=50, unique=True, verbose_name="Name"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Font Awesome icon class (fa-xxxx).",
                        max_length=25,
                        null=True,
                        verbose_name="Icon",
                    ),
                ),
                (
                    "requirement",
                    models.TextField(
                        help_text="Human friendly what needs to be done in order to be awarded this achievement. This is used to aid both users trying to achieve it and admins when awarding.",
                        verbose_name="Requirement",
                    ),
                ),
                (
                    "manual_validation",
                    models.BooleanField(
                        default=True,
                        help_text="Requires manual validation to be awarded. This will be automatically set based on the contents of Award QuerySet.",
                        verbose_name="Manual validation",
                    ),
                ),
                (
                    "points",
                    models.PositiveSmallIntegerField(
                        help_text="Between 0 and 32767", verbose_name="Points"
                    ),
                ),
                (
                    "multiple",
                    models.BooleanField(
                        help_text="Allow users to be awarded this achievement multiple times. Allowed intervals should be written in the requirement field to help users and aid when manual validation is active.",
                        verbose_name="Multiple",
                    ),
                ),
                (
                    "hidden",
                    models.BooleanField(
                        help_text="Hide the details of this Achievement until the user has been awarded it.",
                        verbose_name="Hidden",
                    ),
                ),
                (
                    "type",
                    achievements.models.MultiSelectField(
                        choices=[(1, "Participant"), (2, "Crew")],
                        default=None,
                        max_length=3,
                        null=True,
                    ),
                ),
                (
                    "qs_award",
                    models.TextField(
                        blank=True,
                        default=None,
                        help_text="The contents of this field - when run - should return a queryset with all users which this achievement should be awarded.",
                        null=True,
                        verbose_name="Award QuerySet",
                    ),
                ),
            ],
            options={"ordering": ("name",)},
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30, verbose_name="Name")),
                ("levels", models.JSONField(default=list, verbose_name="Levels")),
            ],
            options={"verbose_name_plural": "Categories", "ordering": ("name",)},
        ),
        migrations.CreateModel(
            name="NfcStation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=32, unique=True, verbose_name="Station Name"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30, verbose_name="team")),
            ],
            options={"ordering": ("name",)},
        ),
        migrations.CreateModel(
            name="NfcScan",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="scans",
                        to="achievements.nfcstation",
                        verbose_name="Station",
                    ),
                ),
                (
                    "usercard",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scans",
                        to="accounts.usercard",
                        verbose_name="Usercard",
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="Award",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created"),
                ),
                ("seen", models.BooleanField(default=False, verbose_name="Seen")),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="awards",
                        to="achievements.achievement",
                        verbose_name="Achivement",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="awards",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={"ordering": ("achievement", "user")},
        ),
        migrations.AddField(
            model_name="achievement",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="achievements",
                to="achievements.category",
                verbose_name="Category",
            ),
        ),
        migrations.AddField(
            model_name="achievement",
            name="users",
            field=models.ManyToManyField(
                through="achievements.Award",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Users",
            ),
        ),
        migrations.CreateModel(
            name="Level",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("level", models.IntegerField(verbose_name="level")),
                ("seen", models.DateTimeField(blank=True, default=None, null=True)),
                (
                    "delivered",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="userlevels",
                        to="achievements.category",
                        verbose_name="category",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="userlevels",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={"unique_together": {("user", "category", "level")}},
        ),
    ]
